//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input/UiControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UiControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UiControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UiControls"",
    ""maps"": [
        {
            ""name"": ""UiInteract"",
            ""id"": ""f84bda52-e4fc-4e43-a269-9eb07fffe283"",
            ""actions"": [
                {
                    ""name"": ""ProgressDialogue"",
                    ""type"": ""Button"",
                    ""id"": ""b40a3041-a96f-4192-a2f6-2464c1cb5c3d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Debug Key"",
                    ""type"": ""Button"",
                    ""id"": ""da198104-e8a3-4d33-b4f1-a923feb19a49"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause Key"",
                    ""type"": ""Button"",
                    ""id"": ""042e3a54-c3e5-4acd-a7cf-1bbb4a9f1b0c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e137c835-310f-471a-8b08-8b11745de375"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyboardMouse"",
                    ""action"": ""ProgressDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b074c07f-1725-49b2-814f-a506212e971d"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ProgressDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a959cc6-02a0-4991-828f-dafb07df71b0"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""b62a1fa7-fb71-4fc4-9c0a-ecebbb585527"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug Key"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""6487f4c5-92e8-43d4-a51d-0153620b3eb6"",
                    ""path"": ""<Keyboard>/quote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyboardMouse"",
                    ""action"": ""Debug Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""7381b761-7e22-48b2-b7eb-20ba6850f7d6"",
                    ""path"": ""<Keyboard>/backslash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8a6100c9-8574-4244-ad01-f13c20f537a3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UiInteract
        m_UiInteract = asset.FindActionMap("UiInteract", throwIfNotFound: true);
        m_UiInteract_ProgressDialogue = m_UiInteract.FindAction("ProgressDialogue", throwIfNotFound: true);
        m_UiInteract_DebugKey = m_UiInteract.FindAction("Debug Key", throwIfNotFound: true);
        m_UiInteract_PauseKey = m_UiInteract.FindAction("Pause Key", throwIfNotFound: true);
    }

    ~@UiControls()
    {
        UnityEngine.Debug.Assert(!m_UiInteract.enabled, "This will cause a leak and performance issues, UiControls.UiInteract.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UiInteract
    private readonly InputActionMap m_UiInteract;
    private List<IUiInteractActions> m_UiInteractActionsCallbackInterfaces = new List<IUiInteractActions>();
    private readonly InputAction m_UiInteract_ProgressDialogue;
    private readonly InputAction m_UiInteract_DebugKey;
    private readonly InputAction m_UiInteract_PauseKey;
    public struct UiInteractActions
    {
        private @UiControls m_Wrapper;
        public UiInteractActions(@UiControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ProgressDialogue => m_Wrapper.m_UiInteract_ProgressDialogue;
        public InputAction @DebugKey => m_Wrapper.m_UiInteract_DebugKey;
        public InputAction @PauseKey => m_Wrapper.m_UiInteract_PauseKey;
        public InputActionMap Get() { return m_Wrapper.m_UiInteract; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UiInteractActions set) { return set.Get(); }
        public void AddCallbacks(IUiInteractActions instance)
        {
            if (instance == null || m_Wrapper.m_UiInteractActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UiInteractActionsCallbackInterfaces.Add(instance);
            @ProgressDialogue.started += instance.OnProgressDialogue;
            @ProgressDialogue.performed += instance.OnProgressDialogue;
            @ProgressDialogue.canceled += instance.OnProgressDialogue;
            @DebugKey.started += instance.OnDebugKey;
            @DebugKey.performed += instance.OnDebugKey;
            @DebugKey.canceled += instance.OnDebugKey;
            @PauseKey.started += instance.OnPauseKey;
            @PauseKey.performed += instance.OnPauseKey;
            @PauseKey.canceled += instance.OnPauseKey;
        }

        private void UnregisterCallbacks(IUiInteractActions instance)
        {
            @ProgressDialogue.started -= instance.OnProgressDialogue;
            @ProgressDialogue.performed -= instance.OnProgressDialogue;
            @ProgressDialogue.canceled -= instance.OnProgressDialogue;
            @DebugKey.started -= instance.OnDebugKey;
            @DebugKey.performed -= instance.OnDebugKey;
            @DebugKey.canceled -= instance.OnDebugKey;
            @PauseKey.started -= instance.OnPauseKey;
            @PauseKey.performed -= instance.OnPauseKey;
            @PauseKey.canceled -= instance.OnPauseKey;
        }

        public void RemoveCallbacks(IUiInteractActions instance)
        {
            if (m_Wrapper.m_UiInteractActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUiInteractActions instance)
        {
            foreach (var item in m_Wrapper.m_UiInteractActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UiInteractActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UiInteractActions @UiInteract => new UiInteractActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IUiInteractActions
    {
        void OnProgressDialogue(InputAction.CallbackContext context);
        void OnDebugKey(InputAction.CallbackContext context);
        void OnPauseKey(InputAction.CallbackContext context);
    }
}
